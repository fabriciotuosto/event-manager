<crap_result>
  <project>
    C:\Develpment\Projects\event-manager\source\event-manager-repository
  </project>
  <project_id>
    1249044267250
  </project_id>
  <timestamp>
    31/07/09 09:45
  </timestamp>
  <classDirectories>
    <classDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\target\classes
    </classDirectory>
    <classDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\target\test-classes
    </classDirectory>
  </classDirectories>
  <testClassDirectories>
    <testClassDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\target\classes
    </testClassDirectory>
    <testClassDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\target\test-classes
    </testClassDirectory>
  </testClassDirectories>
  <sourceDirectories>
    <sourceDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\src\main\java
    </sourceDirectory>
    <sourceDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\src\main\resources
    </sourceDirectory>
    <sourceDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\src\test\java
    </sourceDirectory>
    <sourceDirectory>
      C:\Develpment\Projects\event-manager\source\event-manager-repository\src\test\resources
    </sourceDirectory>
  </sourceDirectories>
  <libClasspaths>
    <libClasspath>
      C:\event-manager-repository\target\classes
    </libClasspath>
    <libClasspath>
      C:\event-manager-repository\target\classes
    </libClasspath>
    <libClasspath>
      C:\event-manager-repository\target\test-classes
    </libClasspath>
    <libClasspath>
      C:\event-manager-repository\target\test-classes
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\commons-lang\commons-lang\2.4\commons-lang-2.4.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\commons-beanutils\commons-beanutils\1.8.0\commons-beanutils-1.8.0.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\com\google\collections\google-collections\1.0-rc2\google-collections-1.0-rc2.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\com\google\code\guice\guice\2.0.1\guice-2.0.1.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\javax\persistence\persistence-api\1.0\persistence-api-1.0.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\org\slf4j\slf4j-api\1.5.6\slf4j-api-1.5.6.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\org\slf4j\slf4j-log4j12\1.5.6\slf4j-log4j12-1.5.6.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\log4j\log4j\1.2.14\log4j-1.2.14.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\junit\junit\4.6\junit-4.6.jar
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\org\mockito\mockito-all\1.7\mockito-all-1.7.jar
    </libClasspath>
    <libClasspath>
      C:\event-manager-utils\target\classes
    </libClasspath>
    <libClasspath>
      C:\event-manager-utils\target\test-classes
    </libClasspath>
    <libClasspath>
      C:\Documents and Settings\Administrator\.m2\repository\com\google\code\guice\guice\1.0\guice-1.0.jar
    </libClasspath>
    <libClasspath>
      C:\Develpment\eclipse\plugins\com.agitar.eclipse.api_2.1.2.000677\lib\ext\org.agitar.mock.jar
    </libClasspath>
    <libClasspath>
      C:\Develpment\eclipse\plugins\com.agitar.eclipse.api_2.1.2.000677\com.agitar.mockingbird.jar
    </libClasspath>
  </libClasspaths>
  <stats>
    <name>
      Method Crap Stats
    </name>
    <totalCrap>
      136,00
    </totalCrap>
    <crap>
      2,72
    </crap>
    <median>
      2,00
    </median>
    <average>
      2,72
    </average>
    <stdDev>
      2,93
    </stdDev>
    <methodCount>
      50
    </methodCount>
    <crapMethodCount>
      0
    </crapMethodCount>
    <crapMethodPercent>
      0,00
    </crapMethodPercent>
    <crapLoad>
      0
    </crapLoad>
    <crapThreshold>
      30
    </crapThreshold>
    <globalAverage>
      4,91
    </globalAverage>
    <globalCraploadAverage>
      -1,00
    </globalCraploadAverage>
    <globalCrapMethodAverage>
      -1,00
    </globalCrapMethodAverage>
    <globalTotalMethodAverage>
      -1,00
    </globalTotalMethodAverage>
    <globalAverageDiff>
      -2,19
    </globalAverageDiff>
    <globalCraploadAverageDiff>
      1,00
    </globalCraploadAverageDiff>
    <globalCrapMethodAverageDiff>
      1,00
    </globalCrapMethodAverageDiff>
    <globalTotalMethodAverageDiff>
      51,00
    </globalTotalMethodAverageDiff>
    <shareStatsUrl>
      http://www.crap4j.org/benchmark/stats/new?stat[project_hash]=1249044267250&amp;stat[project_url]=event-manager-repository&amp;stat[crap]=0.00&amp;stat[crap_load]=0&amp;stat[crap_methods]=0&amp;stat[total_methods]=50&amp;stat[ones]=0&amp;stat[twos]=46&amp;stat[fours]=2&amp;stat[eights]=1&amp;stat[sixteens]=1&amp;stat[thirtytwos]=0&amp;stat[sixtyfours]=0&amp;stat[one28s]=0&amp;stat[two56s]=0
    </shareStatsUrl>
    <histogram>
      <hist>
        <place>
          one
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          two
        </place>
        <value>
          46
        </value>
        <height>
          170,00px
        </height>
      </hist>
      <hist>
        <place>
          four
        </place>
        <value>
          2
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          eight
        </place>
        <value>
          1
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          sixteen
        </place>
        <value>
          1
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          thirtytwo
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          sixtyfour
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          one28
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          two56
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
    </histogram>
  </stats>
  <methods>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy$1
      </className>
      <methodName>
        performQuery
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;)TT;
      </methodSignature>
      <fullMethod>
        public  T performQuery&lt;T&gt;(javax.persistence.Query)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy$2
      </className>
      <methodName>
        performQuery
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;)TT;
      </methodSignature>
      <fullMethod>
        public  T performQuery&lt;T&gt;(javax.persistence.Query)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;ILorg/event/manager/repository/Repository$ResultStrategy;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int, org.event.manager.repository.Repository$ResultStrategy)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy
      </className>
      <methodName>
        getResult
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;)TT;
      </methodSignature>
      <fullMethod>
        public  T getResult&lt;T&gt;(javax.persistence.Query)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/event/manager/repository/Repository$ResultStrategy;
      </methodSignature>
      <fullMethod>
        public static  org.event.manager.repository.Repository$ResultStrategy valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository$ResultStrategy
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[Lorg/event/manager/repository/Repository$ResultStrategy;
      </methodSignature>
      <fullMethod>
        public static  org.event.manager.repository.Repository$ResultStrategy[] values()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljavax/persistence/EntityManager;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(javax.persistence.EntityManager)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findAllByClass
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljava/lang/Class&lt;TE;&gt;;)Ljava/util/List&lt;TE;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;E&gt; findAllByClass&lt;E&gt;(java.lang.Class&lt;E&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findById
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;P:Ljava/lang/Object;&gt;(Ljava/lang/Class&lt;TE;&gt;;TP;)TE;
      </methodSignature>
      <fullMethod>
        public  E findById&lt;E, P&gt;(java.lang.Class&lt;E&gt;, P)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findByNamedQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljava/lang/String;Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;)Ljava/util/List&lt;TE;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;E&gt; findByNamedQuery&lt;E&gt;(java.lang.String, java.util.Map&lt;java.lang.String, java.lang.Object&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findByQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljava/lang/String;Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;)Ljava/util/List&lt;TE;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;E&gt; findByQuery&lt;E&gt;(java.lang.String, java.util.Map&lt;java.lang.String, java.lang.Object&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findByQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;)Ljava/util/List&lt;TE;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;E&gt; findByQuery&lt;E&gt;(javax.persistence.Query)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findByQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;)Ljava/util/List&lt;TE;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;E&gt; findByQuery&lt;E&gt;(javax.persistence.Query, java.util.Map&lt;java.lang.String, java.lang.Object&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findByQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;Lorg/event/manager/repository/Repository$ResultStrategy;)TE;
      </methodSignature>
      <fullMethod>
        public  E findByQuery&lt;E&gt;(javax.persistence.Query, org.event.manager.repository.Repository$ResultStrategy)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findUniqueByNamedQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljava/lang/String;Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;)TE;
      </methodSignature>
      <fullMethod>
        public  E findUniqueByNamedQuery&lt;E&gt;(java.lang.String, java.util.Map&lt;java.lang.String, java.lang.Object&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findUniqueByQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljava/lang/String;Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;)TE;
      </methodSignature>
      <fullMethod>
        public  E findUniqueByQuery&lt;E&gt;(java.lang.String, java.util.Map&lt;java.lang.String, java.lang.Object&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findUniqueByQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;)TE;
      </methodSignature>
      <fullMethod>
        public  E findUniqueByQuery&lt;E&gt;(javax.persistence.Query, java.util.Map&lt;java.lang.String, java.lang.Object&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        getEntityManager
      </methodName>
      <methodSignature>
        ()Ljavax/persistence/EntityManager;
      </methodSignature>
      <fullMethod>
        public  javax.persistence.EntityManager getEntityManager()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        merge
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(TE;)TE;
      </methodSignature>
      <fullMethod>
        public  E merge&lt;E&gt;(E)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        mergeNow
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(TE;)TE;
      </methodSignature>
      <fullMethod>
        public  E mergeNow&lt;E&gt;(E)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        persist
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(TE;)TE;
      </methodSignature>
      <fullMethod>
        public  E persist&lt;E&gt;(E)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        persistNow
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(TE;)TE;
      </methodSignature>
      <fullMethod>
        public  E persistNow&lt;E&gt;(E)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        remove
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(TE;)TE;
      </methodSignature>
      <fullMethod>
        public  E remove&lt;E&gt;(E)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        removeById
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;F:Ljava/lang/Object;&gt;(Ljava/lang/Class&lt;TE;&gt;;TF;)TE;
      </methodSignature>
      <fullMethod>
        public  E removeById&lt;E, F&gt;(java.lang.Class&lt;E&gt;, F)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.guice
      </package>
      <className>
        EntityManagerProvider
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.guice
      </package>
      <className>
        EntityManagerProvider
      </className>
      <methodName>
        get
      </methodName>
      <methodSignature>
        ()Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object get()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.guice
      </package>
      <className>
        EntityManagerProvider
      </className>
      <methodName>
        get
      </methodName>
      <methodSignature>
        ()Ljavax/persistence/EntityManager;
      </methodSignature>
      <fullMethod>
        public  javax.persistence.EntityManager get()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.guice
      </package>
      <className>
        InterceptorModule
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.guice
      </package>
      <className>
        InterceptorModule
      </className>
      <methodName>
        configure
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void configure()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        PerformanceInterceptor
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        PerformanceInterceptor
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        PerformanceInterceptor
      </className>
      <methodName>
        invoke
      </methodName>
      <methodSignature>
        (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy$1
      </className>
      <methodName>
        invoke
      </methodName>
      <methodSignature>
        (Lorg/aopalliance/intercept/MethodInvocation;Ljavax/persistence/EntityManager;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation, javax.persistence.EntityManager)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy$2
      </className>
      <methodName>
        invoke
      </methodName>
      <methodSignature>
        (Lorg/aopalliance/intercept/MethodInvocation;Ljavax/persistence/EntityManager;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation, javax.persistence.EntityManager)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;ILorg/event/manager/repository/interceptors/TransactionInterceptor$TransactionStrategy;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int, org.event.manager.repository.interceptors.TransactionInterceptor$TransactionStrategy)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/event/manager/repository/interceptors/TransactionInterceptor$TransactionStrategy;
      </methodSignature>
      <fullMethod>
        public static  org.event.manager.repository.interceptors.TransactionInterceptor$TransactionStrategy valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor$TransactionStrategy
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[Lorg/event/manager/repository/interceptors/TransactionInterceptor$TransactionStrategy;
      </methodSignature>
      <fullMethod>
        public static  org.event.manager.repository.interceptors.TransactionInterceptor$TransactionStrategy[] values()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        removeAll
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljava/lang/Class&lt;TE;&gt;;)Ljava/util/List&lt;TE;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;E&gt; removeAll&lt;E&gt;(java.lang.Class&lt;E&gt;)
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository.interceptors
      </package>
      <className>
        TransactionInterceptor
      </className>
      <methodName>
        invoke
      </methodName>
      <methodSignature>
        (Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        close
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void close()
      </fullMethod>
      <crap>
        12,00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.event.manager.repository
      </package>
      <className>
        Repository
      </className>
      <methodName>
        findByQuery
      </methodName>
      <methodSignature>
        &lt;E:Ljava/lang/Object;&gt;(Ljavax/persistence/Query;Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;Lorg/event/manager/repository/Repository$ResultStrategy;)TE;
      </methodSignature>
      <fullMethod>
        public  E findByQuery&lt;E&gt;(javax.persistence.Query, java.util.Map&lt;java.lang.String, java.lang.Object&gt;, org.event.manager.repository.Repository$ResultStrategy)
      </fullMethod>
      <crap>
        20,00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
  </methods>
</crap_result>
